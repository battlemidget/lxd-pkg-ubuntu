#!/bin/sh -eu
## Build variables
CGMANAGER_TAG="v0.39"
LXCFS_TAG="lxcfs-0.11"
LXC_TAG="lxc-1.1.4"
LXD_TAG="lxd-0.21"

## Build paths
CGMANAGER_PATH="bin/$(uname -m)/cgmanager"
LXCFS_PATH="bin/$(uname -m)/lxcfs"
LXC_PATH="bin/$(uname -m)/lxc"
LXD_PATH="bin/$(uname -m)/lxd"
DEPS_PATH="bin/$(uname -m)/deps"

## Install paths
PKG_PATH="/apps/lxd/current/bin/$(uname -m)"
PKG_DATA_PATH="/var/lib/apps/lxd/current/"
ARCH=$(dpkg-architecture -qDEB_HOST_MULTIARCH)

# Create the build area
TEMP=$(mktemp -d)
mkdir ${TEMP}/pkg

# Create the target directories
for dir in $CGMANAGER_PATH $LXCFS_PATH $LXC_PATH $LXD_PATH $DEPS_PATH; do
    rm -Rf $dir
    mkdir -p $dir
done

# Install dependencies
apt-get install -y \
    golang-go mercurial \
    bridge-utils dnsmasq-base acl rsync \
    git autoconf automake libtool libfuse-dev libapparmor-dev \
    libseccomp-dev libcap-dev libgnutls-dev nih-dbus-tool libnih-dbus-dev \
    libpam0g-dev

# Bundle some binaries and libraries
cp /sbin/brctl $DEPS_PATH
cp /usr/lib/$ARCH/libnetfilter_conntrack.so.3 $DEPS_PATH
cp /usr/lib/$ARCH/libnettle.so.6 $DEPS_PATH
cp /usr/lib/$ARCH/libhogweed.so.4 $DEPS_PATH
cp /lib/$ARCH/libfuse.so.2.9.4 $DEPS_PATH/libfuse.so.2
cp /lib/$ARCH/libmnl.so.0 $DEPS_PATH
cp /usr/sbin/dnsmasq $DEPS_PATH
cp /usr/bin/rsync $DEPS_PATH
cp /usr/bin/setfacl $DEPS_PATH

# CGManager
(
git clone git://github.com/lxc/cgmanager ${TEMP}/cgmanager
cd ${TEMP}/cgmanager
git checkout ${CGMANAGER_TAG} -b snappy
./bootstrap.sh
./configure --sbindir=${PKG_PATH}/cgmanager/
make
)

cp ${TEMP}/cgmanager/cgmanager $CGMANAGER_PATH
cp ${TEMP}/cgmanager/cgproxy $CGMANAGER_PATH
cp ${TEMP}/cgmanager/cgm-release-agent $CGMANAGER_PATH
cp ${TEMP}/cgmanager/.libs/libcgm*so* $CGMANAGER_PATH

# LXCFS
(
git clone git://github.com/lxc/lxcfs ${TEMP}/lxcfs
cd ${TEMP}/lxcfs
git checkout ${LXCFS_TAG} -b snappy
./bootstrap.sh
PKG_CONFIG_PATH=${TEMP}/cgmanager/ ./configure \
    CFLAGS="-I${TEMP}" LDFLAGS="-L${TEMP}/cgmanager/.libs/" \
    --datarootdir=${PKG_PATH} --localstatedir=${PKG_DATA_PATH}
make
sed -i "s#lib/lxcfs#lxcfs#g" share/lxc.mount.hook
sed -i "s#\${LXC_ROOTFS_MOUNT}${PKG_DATA_PATH}lxcfs/#\${LXC_ROOTFS_MOUNT}/var/lib/lxcfs/#" share/lxc.mount.hook
)

chmod +x ${TEMP}/lxcfs/share/lxc.mount.hook
cp ${TEMP}/lxcfs/share/00-lxcfs.conf $LXCFS_PATH
cp ${TEMP}/lxcfs/share/lxc.mount.hook $LXCFS_PATH
cp ${TEMP}/lxcfs/.libs/lxcfs $LXCFS_PATH

# LXC
(
git clone git://github.com/lxc/lxc ${TEMP}/lxc
cd ${TEMP}/lxc
git checkout ${LXC_TAG} -b snappy
./autogen.sh
PKG_CONFIG_PATH=${TEMP}/cgmanager/ \
    ./configure \
    CFLAGS="-I${TEMP}" LDFLAGS="-L${TEMP}/cgmanager/.libs/ -Wl,-rpath,${TEMP}/cgmanager/.libs/" \
    --disable-selinux --disable-python --disable-lua --disable-tests \
    --disable-examples --disable-doc --disable-api-docs --disable-bash \
    --enable-cgmanager --enable-apparmor --enable-seccomp \
    --enable-capabilities --localstatedir=${PKG_DATA_PATH} --datarootdir=${PKG_PATH} \
    --libexecdir=${PKG_PATH} --with-rootfs-path=${PKG_DATA_PATH}/lxc
make
)

cp ${TEMP}/lxc/src/lxc/liblxc.so $LXC_PATH
ln -s liblxc.so $LXC_PATH/liblxc.so.1
ln -s liblxc.so $LXC_PATH/liblxc.so.1.1.0
cp ${TEMP}/lxc/src/lxc/lxc-monitord $LXC_PATH

mkdir $LXC_PATH/config $LXC_PATH/config/common.conf.d
cp ${TEMP}/lxc/config/templates/common.conf $LXC_PATH/config/
cp ${TEMP}/lxc/config/templates/common.seccomp $LXC_PATH/config/
cp ${TEMP}/lxc/config/templates/userns.conf $LXC_PATH/config/
cp ${TEMP}/lxc/config/templates/ubuntu.common.conf $LXC_PATH/config/
cp ${TEMP}/lxc/config/templates/ubuntu.userns.conf $LXC_PATH/config/
echo -e "\nlxc.aa_profile = unconfined" >> $LXC_PATH/config/ubuntu.userns.conf
ln -s ../../../lxcfs/00-lxcfs.conf $LXC_PATH/config/common.conf.d/

mkdir $LXC_PATH/hooks
cp ${TEMP}/lxc/hooks/clonehostname $LXC_PATH/hooks/

# LXD
(
git clone git://github.com/lxc/lxd ${TEMP}/lxd
cd ${TEMP}/lxd
git checkout ${LXD_TAG} -b snappy
mkdir -p build build/src/github.com/lxc/

export GOPATH=${TEMP}/lxd/build
export PKG_CONFIG_PATH=${TEMP}/lxc
export CGO_CFLAGS="-I${TEMP}/lxc/src/"
export CGO_LDFLAGS="-L${TEMP}/lxc/src/lxc/"

ln -s ${TEMP}/lxd ${TEMP}/lxd/build/src/github.com/lxc/lxd
go get -v -x ./... || true
go get -v -x ./... || true
go get -v -x ./... || true
go install -v -x github.com/lxc/lxd/fuidshift
go install -v -x github.com/lxc/lxd/lxc
go install -v -x github.com/lxc/lxd/lxd
)
cp ${TEMP}/lxd/build/bin/* $LXD_PATH
cp ${TEMP}/lxd/scripts/lxd-images $LXD_PATH

rm -Rf ${TEMP}
